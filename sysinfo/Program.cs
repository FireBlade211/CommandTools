using Microsoft.Win32;
using OVExt = OSVersionExtension;
using System.CommandLine;
using System.Text;
using System.Security.Principal;
using System.Globalization;
using System.Management;

namespace sysinfo
{
    public enum OutputType
    {
        Mixed,
        SystemOnly,
        HardwareOnly,
        Verbose
    }

    public class Program
    {
        public static OVExt.OperatingSystem? DebugForceOS;

        public static DateTime? GetCombinedInstallDateTime()
        {
            const string keyPath = @"SOFTWARE\Microsoft\Windows NT\CurrentVersion";
            const string installDateName = "InstallDate";
            const string installTimeName = "InstallTime";

            using var key = Registry.LocalMachine.OpenSubKey(keyPath);

            if (key == null)
                return null;

            // Read InstallDate (Unix timestamp)
            var installDateVal = key.GetValue(installDateName);
            DateTime? installDate = null;

            if (installDateVal is int intVal)
            {
                installDate = DateTimeOffset.FromUnixTimeSeconds(intVal).DateTime.Date;
            }
            else if (installDateVal is long longVal)
            {
                installDate = DateTimeOffset.FromUnixTimeSeconds(longVal).DateTime.Date;
            }

            // Read InstallTime (FILETIME QWORD)
            var installTimeVal = key.GetValue(installTimeName);
            DateTime? installTime = null;

            if (installTimeVal is long fileTimeLong)
            {
                try
                {
                    installTime = DateTime.FromFileTimeUtc(fileTimeLong).ToLocalTime();
                }
                catch
                {
                    // ignore parse errors
                }
            }
            else if (installTimeVal is byte[] bytes && bytes.Length == 8)
            {
                long fileTime = BitConverter.ToInt64(bytes, 0);
                try
                {
                    installTime = DateTime.FromFileTimeUtc(fileTime).ToLocalTime();
                }
                catch
                {
                    // ignore parse errors
                }
            }

            if (installDate.HasValue && installTime.HasValue)
            {
                // Combine date part from InstallDate and time part from InstallTime
                var combined = installDate.Value.Date + installTime.Value.TimeOfDay;
                return combined;
            }
            else if (installDate.HasValue)
            {
                return installDate.Value;
            }
            else if (installTime.HasValue)
            {
                return installTime.Value;
            }
            else
            {
                return null;
            }
        }

        public static OVExt.OperatingSystem GetOS()
        {
            if (DebugForceOS != null)
            {
                return (OVExt.OperatingSystem)DebugForceOS;
            }

            return OVExt.OSVersion.GetOperatingSystem();
        }

        /// <summary>
        /// Returns an ANSI-formatted color ASCII art string representing the logo of the current operating system.
        /// </summary>
        /// <returns>The ANSI-formatted color ASCII art string representing the current OS logo if supported; otherwise, <see langword="null"/>.</returns>
        public static string? GetAsciiArtForCurrentOperatingSystem()
        {
            return GetOS() switch
            {
                OVExt.OperatingSystem.Windows7 => @"[0;5;37;47m         :8[0;1;37;47m [0;1;31;47m8[0;5;33;41m%[0;1;31;43m8[0;5;31;41mX[0;1;31;43m8[0;33;47m8[0;1;31;47mX[0;5;37;47m8t                   [0m
[0;5;37;47m  .  . S[0;33;47m8[0;5;31;41m:%t[0;5;33;41mX[0;5;31;41m@[0;5;33;41m@@[0;5;31;41mt:[0;5;33;41mtt[0;1;31;43m8[0;1;37;47m [0;5;37;47m8: .  .  . .  . . [0m
[0;5;37;47m   .   [0;1;37;47m [0;5;31;41m 8[0;1;31;43m8[0;5;33;41mXX[0;1;31;43m8[0;5;33;41mt[0;1;31;43m888[0;5;33;41m.[0;5;33;43mt[0;5;31;41m [0;5;33;41m [0;1;37;47m8[0;5;37;47m [0;1;37;47m88[0;5;37;47m.  .     .  ;%[0m
[0;5;37;47m     .X[0;5;33;41m:8@S[0;1;31;43m8[0;5;33;41m:[0;1;33;43m;[0;5;1;33;41m8[0;1;31;47m8[0;5;1;31;43m8[0;5;33;43m [0;5;33;41m%[0;1;31;43m8[0;5;33;43m:[0;5;37;41m8[0;5;37;47m t[0;1;33;43mX[0;1;30;43m.8[0;1;33;47m%[0;5;37;47m8;.  .:X[0;1;37;47m%[0;1;30;47m@[0;5;33;40m%[0;33;47m8[0m
[0;5;37;47m .    [0;1;37;47m;[0;5;33;41m;@S[0;1;31;43m8[0;5;33;41m.[0;5;37;43m@[0;5;33;41m [0;5;33;43m:[0;5;33;41m:[0;1;33;43m;[0;5;33;41m [0;5;37;43m8[0;5;1;33;41m8[0;1;31;43m8[0;1;37;47m8[0;5;37;47m.[0;5;37;43m8[0;37;43m@[0;5;33;43m:[0;5;33;42mS[0;1;30;43m8[0;1;33;43m.[0;37;43mX[0;1;30;43m8[0;33;47m8[0;1;30;43m8[0;5;33;40m:[0;1;30;43m8[0;1;30;42m8[0;33;42m8[0;1;30;42m8[0;5;33;40m8[0;1;37;47m [0m
[0;5;37;47m   . S[0;5;33;41m.[0;1;31;43m8[0;5;33;41mt[0;1;33;43m:[0;5;1;31;43m8[0;1;33;43m:[0;5;1;33;41m8[0;5;37;43m@[0;5;33;41m:[0;5;37;43mX[0;5;33;43m [0;5;37;43mX[0;5;33;43m.[0;1;33;43m.[0;5;37;43m8[0;5;37;47m@%[0;5;37;43m8[0;33;47m88[0;5;33;43mt[0;33;47m8[0;5;33;42m.[0;1;33;43mS[0;1;32;43m8[0;1;30;43m8[0;5;33;42mX[0;1;30;43m8[0;33;42m8[0;5;33;40m8[0;1;30;42m@@[0;1;30;47m8[0;5;37;47mS[0m
[0;5;37;47m  .  [0;1;37;47mt[0;5;33;41m:[0;1;31;43m8[0;5;1;33;41m8[0;5;37;41m8[0;5;1;33;41m8[0;5;37;43m@[0;5;33;41m [0;5;33;43m:;[0;1;33;43m:[0;5;1;31;43m8[0;5;33;43m [0;5;33;41m [0;5;37;43m@[0;5;37;47m8t[0;1;33;47mX88[0;5;33;42m;[0;33;47mX[0;5;37;43m@[0;37;43m@@[0;1;33;43m.[0;1;32;43m8[0;1;30;43m8[0;1;32;43m8[0;5;33;40mX[0;33;42mX[0;1;30;42m8[0;1;30;43m8[0;1;37;47m.[0;5;37;47m [0m
[0;5;37;47m    t[0;5;33;41m.[0;1;33;43m;[0;5;33;41m [0;5;33;43m;[0;5;33;41m:[0;5;33;43m:[0;5;33;41m.[0;5;37;43mX[0;1;33;43m.[0;5;37;43mX[0;5;1;31;43m@[0;5;37;43m@[0;5;33;43m [0;5;37;43m@[0;5;33;43m [0;5;37;47m8X[0;5;37;43m@[0;1;33;47mX8X8[0;37;43m@[0;5;33;43m [0;5;37;42m8[0;37;43m@[0;1;33;43m:[0;1;32;43m8[0;1;30;43m8[0;1;32;43m8[0;5;33;40m@[0;33;42m8[0;1;30;47m8[0;5;37;47m8 [0m
[0;5;37;47m  . [0;1;37;47m@[0;5;33;41m [0;1;33;47mS[0;1;37;47m  [0;5;37;47m88888[0;1;37;47m [0;5;37;43m8[0;5;37;41m8[0;5;37;43mS[0;5;1;31;43m8[0;1;37;47m [0;5;37;47mt@[0;5;37;43m@[0;1;33;47m%@88[0;1;32;47m8[0;33;47m8[0;5;33;43m;[0;5;37;42m8[0;37;43m@[0;1;33;43m.[0;1;32;43m8[0;1;30;43m8[0;32;43m8[0;5;33;40m;[0;1;37;47m [0;5;37;47m  [0m
[0;5;37;47m      ;@8[0;1;37;47m@tX8[0;5;37;47mX:  8[0;1;33;47mS[0;5;37;47m8t[0;5;37;43m8[0;1;37;47m8[0;5;37;43m8[0;1;33;47mS@88[0;5;37;42m8[0;33;47m8[0;1;33;43mt[0;5;37;43m@[0;5;33;42mS[0;37;43m8[0;1;32;43m8[0;1;30;43m8[0;1;32;47m8[0;5;37;47mt  [0m
[0;5;37;47m  .@[0;1;30;47m:[0;36;47m8888@[0;1;36;47mS[0;1;37;47m tS[0;5;37;47m8X.:.;@[0;1;33;47m88SX@[0;1;32;47m8[0;1;33;47m88[0;37;43mX[0;5;37;42m8[0;37;43mS[0;1;33;43m:[0;1;32;43m8[0;1;30;43m88[0;1;37;47m [0;5;37;47m. .[0m
[0;5;37;47m  :[0;36;47m8[0;1;34;46m8[0;37;46m@[0;1;34;46m8[0;36;47m8[0;1;36;47m8[0;1;34;47m@[0;1;36;47mSS[0;1;37;47mt[0;5;37;47m8[0;1;37;47mS[0;5;37;47m888 St:@[0;1;37;47mt [0;1;33;47mXX[0;1;32;47m8[0;1;33;47m8[0;33;47m8[0;5;37;43m@[0;33;47m8S[0;1;37;47m  [0;5;37;47m8t   [0m
[0;5;37;47m  8[0;1;30;46m8[0;37;46m@[0;1;34;46m8[0;36;47m@[0;37;46m@[0;1;34;47m8[0;1;36;47m8X%S[0;1;37;47m;[0;5;1;36;47m8[0;1;37;47mt[0;5;37;47m88.8[0;5;37;43mS[0;5;37;47m%[0;5;1;37;43m8[0;5;37;47m ;t:tS%;%S;[0;5;37;43mS[0;5;37;47mt .  [0m
[0;5;37;47m :[0;36;47m%[0;5;36;44m%[0;36;47m8[0;37;46m@[0;5;36;44m:[0;1;36;47m8[0;37;46m@[0;36;47m8[0;1;34;47m@[0;1;36;47mS%[0;1;37;47m t[0;5;1;36;47m8[0;1;37;47m;[0;5;37;47mX.[0;1;33;47mS[0;5;37;47m;[0;5;37;43mX[0;5;37;47m%[0;5;37;43m:[0;5;37;47m.[0;5;37;43m;[0;5;37;47m;[0;5;37;43m;[0;1;37;47m8[0;5;37;43m:S%[0;5;33;43m::[0;5;37;43m@[0;5;37;47m%    [0m
[0;5;37;47m 8[0;1;30;46m88[0;5;36;44m%[0;36;47m8[0;37;46mX[0;1;34;46m8[0;36;47m8[0;1;36;47m8[0;1;34;47m8[0;1;36;47m8@@X[0;1;37;47m [0;5;37;47m8;@[0;5;37;43mS[0;5;1;33;47m8[0;5;37;43m88@XXXXtS[0;5;33;43m  [0;5;33;41m.[0;5;33;43m;[0;1;37;47m;[0;5;37;47m.    [0m
[0;5;37;47m.[0;1;30;47m;[0;5;36;44mS[0;37;46m8[0;1;30;46m8[0;1;34;46m8[0;36;47m8[0;37;46mX[0;5;36;44m;[0;36;47m8[0;37;46mX[0;1;34;47m8[0;1;36;47m8[0;1;34;47m@[0;1;36;47mX@[0;5;37;47m8t[0;1;37;47m8[0;5;37;43m88[0;5;1;33;47m8[0;5;37;43m8[0;5;1;33;47m8[0;5;37;43m888%[0;5;33;43m [0;5;1;31;43m@[0;5;37;43mX[0;5;1;31;43m8[0;5;33;43m.[0;33;47m@[0;5;37;47mX     [0m
[0;5;37;47m@[0;1;30;46m88[0;5;36;44mX[0;5;36;40m.[0;1;34;46m8[0;1;30;46m8[0;37;46m8@[0;1;34;46m8[0;1;36;47m8[0;1;34;46m8[0;36;47m8[0;1;36;47m8[0;5;37;44m8[0;1;37;47m:[0;5;37;47m;X[0;5;37;43mS8888@@S[0;5;1;31;43mS[0;5;37;43mS[0;5;1;31;43m@[0;5;37;43mS[0;5;1;33;41m8[0;5;33;43m [0;5;33;41m [0;5;37;47mS.     [0m
[0;1;30;47mt[0;1;34;46m8[0;1;30;47m8[0;1;36;47mX[0;1;37;47m :[0;5;37;47m8[0;1;37;47m ;:[0;1;36;47m8[0;36;47m8[0;5;36;44m:[0;36;47m8[0;1;36;47m8[0;5;37;47m8;[0;5;37;43m8SS[0;5;1;31;43mS[0;5;37;43m@[0;5;1;31;43mS[0;5;37;43mS[0;5;1;31;43mX%SX@88[0;5;33;41m [0;5;37;43mt[0;5;37;47m:      [0m
[0;5;37;47m8t:.;:t. ;. t[0;36;47m8[0;1;36;47mS[0;5;37;47m;8[0;5;33;43m [0;5;1;31;43m@[0;5;37;43mS[0;5;1;31;43mS%[0;5;37;43mX[0;5;1;31;43m@S[0;5;37;43mX[0;5;1;31;43m8[0;5;37;43mS[0;5;1;31;43m88[0;5;33;43m ;[0;1;37;47m%[0;5;37;47m;      [0m
[0;5;37;47m    .    :. .:: [0;1;37;47m:[0;5;1;31;43m8XX[0;5;37;43mX[0;5;1;31;43m8@X@88[0;5;1;33;41m8[0;5;1;31;43m8[0;5;33;41m [0;1;33;43m.[0;1;31;47m8[0;5;37;47m% .     [0m
[0;5;37;47m  .  . .  .     .t8[0;1;33;47mX[0;5;37;43m8[0;5;1;31;43m8@888[0;5;37;43m@[0;5;1;33;41m8[0;1;33;47mX[0;1;37;47m8[0;5;1;33;47m8[0;5;37;47m@.       [0m
",
  OVExt.OperatingSystem.WindowsServer2012 or OVExt.OperatingSystem.Windows8
  or OVExt.OperatingSystem.Windows81 or OVExt.OperatingSystem.WindowsServer2012R2
  or OVExt.OperatingSystem.WindowsServer2016 or OVExt.OperatingSystem.WindowsServer2019
  or OVExt.OperatingSystem.Windows10 => @"[0;5;37;47m                                        [0m
[0;5;37;47m  .  . .  .  . .  .  . .  .  . .  .  .  [0m
[0;5;37;47m   .       .       .       .  . ::;:  . [0m
[0;5;37;47m     .  .    .  .    . ..:t%[0;5;37;46m@[0;1;37;47m8[0;5;37;46m%S[0;5;36;46m ..[0;1;37;47mt[0;5;37;47m    [0m
[0;5;37;47m .       ....:tt%:;[0;5;37;46m888@[0;5;36;46m ..  [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m.[0;5;36;46m.[0;5;1;34;46m8[0;1;36;47mS[0;5;37;47m    [0m
[0;5;37;47m   .;[0;5;37;46m8[0;1;36;47mX[0;5;37;46m88S[0;5;36;46m ...   [0;1;37;47mt[0;5;1;36;47m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m:[0;5;36;46m.[0;5;36;44m:[0;5;36;46m..[0;5;36;44m [0;5;36;46m..:: [0;1;37;47mt[0;5;37;47m    [0m
[0;5;37;47m  . [0;1;37;47m8[0;5;36;46m  [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m:[0;5;36;46m:[0;5;36;44m:[0;5;36;46m:[0;5;36;44m:[0;5;36;46m [0;5;37;47m8[0;1;37;47m@[0;5;1;34;46mX[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;1;36;46m.[0;5;36;46m  .[0;5;36;44m:[0;5;36;46m.:.[0;5;36;44m:[0;5;36;46m.[0;5;36;44m.[0;5;36;46m [0;5;37;47m8:  .[0m
[0;5;37;47m    [0;1;36;47mS[0;5;1;34;46mX[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m [0;5;36;46m::.:.:[0;5;1;34;46m8[0;5;37;47mX[0;5;1;37;46m8[0;5;1;34;46m@[0;5;36;46m [0;5;36;44m [0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;36;44m [0;5;36;46m:::[0;1;34;46m8[0;5;36;46m  ::[0;5;1;34;46m8[0;5;37;46m8[0;5;37;47m    [0m
[0;5;37;47m    t[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m .:.[0;5;36;44m:[0;5;36;46m:[0;1;34;46m8[0;5;36;46m [0;5;36;44m [0;5;36;46m [0;5;37;47mX[0;5;1;36;47m8[0;5;36;46m  . [0;5;36;44m [0;5;36;46m :.[0;1;34;46m8[0;5;36;46m  [0;5;1;36;44m8[0;5;36;46m.[0;5;36;44m:[0;5;36;46m. [0;5;37;47m8;.  [0m
[0;5;37;47m .  [0;5;37;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m.[0;5;36;44m:[0;5;36;46m::. [0;5;1;34;46m8[0;5;36;46m : [0;1;37;47m%[0;5;37;47m8[0;5;1;34;46m88[0;5;36;46m.[0;1;34;46m8[0;5;36;46m .[0;1;34;46m8[0;5;36;46m  [0;5;1;36;44m8[0;5;36;46m .[0;1;34;46m8[0;5;36;46m  [0;5;36;44m [0;5;1;36;47m8[0;5;37;47m    [0m
[0;5;37;47m    8[0;5;1;34;46m@[0;5;36;46m [0;1;36;46m.[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m.[0;5;36;44m:[0;5;36;46m..[0;5;36;44m:[0;5;36;46m. [0;5;37;47m8[0;5;1;37;46m8[0;5;1;34;46m@[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m  [0;5;1;36;44m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m  [0;5;36;44m.[0;5;36;46m  [0;5;1;36;44m8[0;5;36;46m: [0;1;37;47m8[0;5;37;47m   .[0m
[0;5;37;47m  ..S[0;5;36;46m [0;5;37;46m88888888888[0;5;37;47m88[0;5;37;46mX888[0;1;36;47m8[0;5;37;46m888[0;1;36;47m8[0;5;37;46m88[0;1;36;47m8[0;5;37;46m8888[0;5;37;47m8    [0m
[0;5;37;47m    %888888888@88St8888888888X88@8@: .  [0m
[0;5;37;47m    @[0;5;1;34;46mSSSSSSSS%SSS[0;5;1;36;47m@8[0;5;1;34;46mX%SSS%S%SS%%S%S%[0;5;1;37;46m8[0;5;37;47m;  .[0m
[0;5;37;47m .  [0;5;37;46mX[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@S[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;37;47m8[0;5;1;36;47m8[0;5;1;34;46mXS%%S[0;5;36;46m [0;5;1;34;46m@S[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m@[0;5;37;47m8    [0m
[0;5;37;47m   .8[0;5;1;34;46mX[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8@[0;5;37;47mX[0;5;1;36;47m8[0;5;1;34;46mX[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;37;46m8[0;5;37;47m :  [0m
[0;5;37;47m    [0;5;1;37;46m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m  [0;5;37;47m8[0;5;1;36;47m8[0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;37;47m8% . [0m
[0;5;37;47m . .[0;1;37;47mX[0;5;1;34;46m@[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m..[0;5;36;44m.[0;5;36;46m..[0;1;36;46m.[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m [0;5;37;47m88[0;5;1;34;46m@[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m [0;5;36;46m. [0;5;36;44m.[0;5;36;46m..[0;5;36;44m.[0;5;36;46m..[0;5;36;44m.[0;5;36;46m.[0;5;1;34;46m8[0;5;37;47m8:   [0m
[0;5;37;47m   .S[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m.[0;5;36;44m:[0;5;36;46m.:.[0;5;1;36;44m8[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;1;36;44m8[0;5;37;47m@[0;5;1;37;46m@[0;5;1;34;46m@[0;5;36;46m [0;5;36;44m [0;5;36;46m.:.[0;1;34;46m8[0;5;36;46m  [0;1;36;46m:[0;5;36;46m  [0;1;36;46m.[0;5;36;46m  [0;5;1;34;46m8[0;5;37;46m@[0;5;37;47m  . [0m
[0;5;37;47m    %8@S[0;5;1;37;46m8[0;1;37;47m8[0;5;37;46m8[0;1;36;47mX[0;5;37;46m88S[0;5;1;34;46m8[0;5;36;46m [0;5;37;47m88[0;5;1;34;46mX[0;5;36;46m  :[0;5;36;44m:[0;5;36;46m   [0;5;36;44m [0;5;36;46m [0;5;1;34;46m88[0;5;36;46m [0;5;1;36;44m8[0;5;36;46m  [0;5;37;47m8t   [0m
[0;5;37;47m  .      ..      %.%888[0;5;1;37;46m8[0;1;37;47mS[0;5;37;46m8[0;1;36;47m@[0;5;37;46m@@S[0;5;36;46m [0;5;1;34;46m8[0;5;36;46m [0;5;36;44m.[0;5;36;46m [0;1;37;47m%[0;5;37;47m.  .[0m
[0;5;37;47m    . .  .:      ...:;. :.     .X [0;1;37;47m8[0;5;1;36;47m@[0;5;37;47m. . [0m
[0;5;37;47m  .       ..     ..    ...      ;. .    [0m
[0;5;37;47m    .  .   .      ..    ...     :.  .  .[0m
",
    OVExt.OperatingSystem.Windows11 or OVExt.OperatingSystem.WindowsServer2022 => @"[0;5;37;47m;[0;5;37;46m888888888888888888[0;5;37;47mS;[0;5;37;46m@@@XXXX[0;5;36;46m.[0;36;47m8[0;5;36;46m [0;1;36;47m8[0;5;36;46m [0;37;46m@[0;5;36;46m [0;37;46m@[0;5;36;46m [0;37;46mX[0;5;37;46m8[0;5;37;47m8[0m
[0;5;37;46m888888888888888@@88[0;5;37;47m@t[0;5;37;46m@@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;37;44m8[0;5;37;46m@[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46mX[0;5;1;34;46m8[0m
[0;5;37;46m888888[0;5;1;34;46mX[0;5;1;37;46m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;47m@S[0;5;37;46m@[0;5;1;34;46m8[0;1;36;47mX[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0m
[0;5;37;46m888[0;5;1;34;46mX[0;5;1;37;46m8[0;5;1;34;46m@[0;5;1;36;47m8[0;5;37;46m888[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;46m88[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m@[0;5;37;47m;%[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;36;44m [0;5;37;46m8[0m
[0;5;37;46m888[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m@[0;5;1;37;46m8[0;5;37;47m@%[0;5;37;46m8[0;5;1;34;46m@[0;5;37;46m888[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;36;46m [0;1;36;47m8[0;5;36;46m.[0m
[0;5;37;46m88[0;5;1;34;46m@[0;5;1;37;46m8[0;5;37;46m8888[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m@[0;5;37;46m888[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m@[0;5;37;46m8[0;5;37;47mtS[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;37;47m [0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;36;44m8[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;36;44m [0;5;37;46m8[0;5;36;44m [0;5;37;46m@[0m
[0;5;37;46m8888[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;36;44m8[0;5;1;37;46m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;37;46m8[0;5;37;47mXS[0;5;1;34;46mX[0;5;1;37;46m8[0;5;1;34;46m8[0;1;36;47m%[0;5;1;34;46mX[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8@[0;5;36;46m [0;36;47m8[0;5;1;34;46m8[0m
[0;5;37;46m888[0;5;1;37;46m@[0;5;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;37;46m888888[0;5;1;34;46m@[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;47m@%[0;5;1;37;46m@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;36;44m [0;5;37;46m@[0;5;1;36;44m8[0;5;37;46mX[0m
[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m@[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;36;44m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;47m @[0;5;37;46m8[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m@[0;5;36;44m;[0m
[0;5;37;46m@88[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m@[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;47m8[0;5;1;34;46m8@[0;5;1;37;46m8[0;5;37;46m8[0;5;37;47mt@[0;5;1;37;46m@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47mX[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47mX[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m@[0;1;36;46m.[0;5;37;46m@[0m
[0;5;37;46m@888[0;5;1;34;46m8[0;5;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m888[0;5;1;36;44m8[0;5;1;37;46m8[0;5;37;47mX8[0;5;1;34;46m@[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46mX[0;5;36;44m [0m
[0;1;37;47m8[0;5;1;37;46m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m88[0;5;1;36;47m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m8[0;5;1;37;46m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m8[0;5;1;37;46m8[0;5;37;47m;.88[0;5;1;36;47m8[0;5;37;47m88[0;5;1;36;47m8[0;5;37;47m8[0;5;1;36;47m8[0;5;37;47m8[0;1;37;47m [0;5;37;47m8[0;5;37;46m8[0;5;37;47m8[0;1;36;47m%[0;1;37;47m%[0;5;37;46m8[0;1;37;47m.X[0;5;37;46mS[0m
[0;5;37;46m8@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8X[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8@[0;5;37;46m8[0;5;1;34;46m88@[0;5;37;46m8[0;5;1;36;44m8[0;5;37;47m 8[0;5;1;34;46mX@8888888X8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46mX[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8@[0;1;36;47m8[0m
[0;5;37;46m@88[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;1;37;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m88[0;5;37;47m%S[0;5;1;37;46m@[0;5;1;34;46m8[0;1;36;47m%[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mX[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m88[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m@[0;5;1;36;44m@[0;5;37;46m@[0;5;36;44m [0;5;36;46m.[0m
[0;5;37;46m@[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m8[0;5;37;47m%@[0;5;1;34;46m@[0;5;37;46m8[0;5;1;34;46m88[0;5;37;46m8[0;5;1;34;46m88[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m@[0;5;36;44m [0;5;37;46mX[0;5;36;44m [0;5;37;46m@[0;1;34;46m8[0m
[0;5;37;46m@8[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;5;1;37;46m8[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;47m %[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46mX[0;5;36;44m [0;5;37;46mX[0;5;36;46m;[0;1;36;46mt[0;5;36;46m [0;1;34;46m8[0m
[0;5;37;46mX88[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47m%[0;5;1;34;46m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m88[0;5;37;47mSX[0;5;1;34;46m@[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m@[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;36;44m [0;5;37;46mX[0;1;36;46m.[0;5;37;46mX[0;5;36;44m.[0;5;37;46m@[0;5;36;44m [0;5;37;46m8[0;1;36;46m.[0m
[0;5;37;46mX[0;5;1;36;44m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;47m.%[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46mX[0;5;36;44m [0;5;37;46mX[0;5;36;46m [0;1;34;46m8[0;5;36;46m.[0;37;46m@[0;5;1;36;44m8[0;5;36;46m [0m
[0;5;37;46mX8[0;5;1;36;44m8[0;5;37;46m88[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47mS[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47mX[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;5;37;47m.@[0;5;1;34;46m@[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;36;44m [0;5;37;46m@[0;5;36;44m.[0;5;37;46mX[0;1;36;46mt[0;5;37;46mX[0;5;36;44m [0;5;36;46mt[0;36;47m8[0;5;36;44m [0;5;36;46m [0;5;36;44mt[0;37;46mS[0m
[0;5;36;46m;[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47mX[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;34;46m8[0;5;37;47m %[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m@[0;5;36;46m:[0;37;46mX[0;5;1;34;46m88[0;5;36;46m:[0;37;46m@[0;5;36;44m [0;5;36;46m [0;1;34;46m8[0;5;36;46m;[0;1;34;46m8[0;5;36;46m [0m
[0;5;36;46mt[0;1;34;47m8[0;5;37;46m@[0;5;1;36;44m8[0;5;37;46m88[0;5;1;34;46m8[0;1;36;47m@[0;5;1;34;46m8[0;5;37;46m8[0;5;1;34;46m8[0;1;36;47mX[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m88[0;5;37;47m@8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;36;44m [0;5;37;46m@[0;1;34;46m8[0;5;1;34;46m8[0;5;37;46mX[0;5;36;44m.[0;1;36;47m8[0;5;36;44m:[0;5;36;46m.[0;37;46mX[0;5;1;36;44m8[0;5;36;46m;[0;5;36;44m%[0;36;47m8[0;5;36;44m [0m
[0;5;36;46mt [0;5;37;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;1;34;46m8[0;1;34;47m8[0;5;37;47m%%[0;5;1;34;46m8[0;5;37;46m8[0;5;36;44m [0;5;37;46mX[0;5;36;46m:[0;5;36;44m;[0;5;37;46m8[0;1;34;46m8[0;5;36;46m [0;37;46mX[0;5;36;46m [0;1;34;46m8[0;5;36;46m [0;5;36;44m:[0;1;36;46m%[0;5;37;44m8[0;5;36;46m:[0;5;36;44m:[0;5;36;46mX[0m
[0;1;37;47m8[0;5;36;46m [0;5;37;44m8[0;5;37;46mX[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;1;36;47m8[0;5;1;34;46m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;1;36;44m8[0;1;36;47m8[0;5;37;46m8[0;5;1;36;44m8[0;5;37;46m8[0;5;37;47m8t[0;5;1;34;46m8[0;5;37;46m@[0;5;36;46m [0;5;36;44m;[0;1;36;47m8[0;5;36;46m;[0;5;36;44m:[0;5;37;46m@[0;5;36;44m:[0;5;36;46m.[0;5;36;44mt[0;37;46m@[0;5;36;44m [0;5;37;46mX[0;1;34;46m8[0;5;36;46m.[0;5;36;44mX[0;5;36;46mX[0;1;37;47m [0m
",
_ => null
            };
        }

        public static string PascalToTitleCase(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            var sb = new StringBuilder();
            sb.Append(input[0]);

            for (int i = 1; i < input.Length; i++)
            {
                char current = input[i];
                char previous = input[i - 1];

                // Insert space before uppercase letter if previous char is lowercase or digit
                if (char.IsUpper(current) && (char.IsLower(previous) || char.IsDigit(previous)))
                {
                    sb.Append(' ');
                }
                // Insert space before digit if previous char is letter (upper or lower)
                else if (char.IsDigit(current) && char.IsLetter(previous))
                {
                    sb.Append(' ');
                }

                sb.Append(current);
            }

            // Now capitalize each word’s first letter, but keep the rest as-is
            var words = sb.ToString().Split(' ');
            for (int i = 0; i < words.Length; i++)
            {
                if (words[i].Length > 0)
                {
                    words[i] = char.ToUpper(words[i][0]) + words[i].Substring(1);
                }
            }

            return string.Join(' ', words);
        }

        public static string FormatFrequency(double mhz)
        {
            // Convert MHz to Hz
            double hz = mhz * 1_000_000;

            // Define units and their thresholds
            string[] units = { "Hz", "kHz", "MHz", "GHz", "THz" };
            int unitIndex = 0;

            while (hz >= 1000 && unitIndex < units.Length - 1)
            {
                hz /= 1000.0;
                unitIndex++;
            }

            return $"{hz:0.##} {units[unitIndex]}";
        }

        public static string FormatBytes(ulong bytes)
        {
            string[] units = { "B", "KB", "MB", "GB", "TB", "PB" };
            double size = bytes;
            int unitIndex = 0;

            while (size >= 1024 && unitIndex < units.Length - 1)
            {
                size /= 1024;
                unitIndex++;
            }

            return $"{size:0.##} {units[unitIndex]}";
        }

        public static string? MapStandardResolutions(int w, int h, bool secondPass = false)
        {
            return (w, h) switch
            {
                (320, 240) => "EGA / QVGA",
                (640, 480) => "VGA",
                (800, 600) => "SVGA",
                (1024, 768) => "XGA",
                (1152, 864) => "XGA+",
                (1280, 720) => "HD",
                (1280, 800) => "WXGA",
                (1280, 1024) => "SXGA",
                (1360, 768) => "HD (1360×768)",
                (1366, 768) => "HD (1366×768)",
                (1400, 1050) => "SXGA+",
                (1440, 900) => "WXGA+",
                (1600, 900) => "HD+",
                (1600, 1200) => "UXGA",
                (1680, 1050) => "WSXGA+",
                (1920, 1080) => "Full HD",
                (1920, 1200) => "WUXGA",
                (1920, 1440) => "Full HD 4:3",
                (2048, 1152) => "QWXGA",
                (2560, 1080) => "UltraWide Full HD",
                (2560, 1440) => "Quad HD (QHD)",
                (2560, 1600) => "WQXGA",
                (3440, 1440) => "UltraWide QHD",
                (3840, 1600) => "UW4K",
                (3840, 2160) => "Ultra HD (4K)",
                (4096, 2160) => "DCI 4K",
                (5120, 1440) => "Dual QHD",
                (5120, 2160) => "5K UltraWide",
                (5120, 2880) => "5K",
                (7680, 4320) => "8K UHD",
                _ => !secondPass ? MapStandardResolutions(h, w, true) : null
            };
        }

        public static void Main(string[] args)
        {
            var interceptor = new ConsoleInterceptor(Console.Out);
            Console.SetOut(interceptor);

            var rootCmd = new RootCommand("Lists system information.");

            //var outType = new Option<OutputType>("--output", "-o")
            //{
            //    Description = "The type of system information to show. Verbose shows all information."
            //};

            var noArt = new Option<bool>("--noart", "-n")
            {
                Description = "Don't show the ASCII art."
            };

            //rootCmd.Options.Add(outType);
            rootCmd.Options.Add(noArt);

            rootCmd.SetAction(result =>
            {
                if (!result.GetValue(noArt))
                {
                    var art = GetAsciiArtForCurrentOperatingSystem();
                    if (art != null)
                    {
                        var ansiToConsole = new Dictionary<int, ConsoleColor>
                        {
                            [30] = ConsoleColor.Black,
                            [31] = ConsoleColor.Red,
                            [32] = ConsoleColor.Green,
                            [33] = ConsoleColor.Yellow,
                            [34] = ConsoleColor.Blue,
                            [35] = ConsoleColor.Magenta,
                            [36] = ConsoleColor.Cyan,
                            [37] = ConsoleColor.White,

                            // Bright versions (90-97)
                            [90] = ConsoleColor.DarkGray,   // bright black
                            [91] = ConsoleColor.Red,        // bright red
                            [92] = ConsoleColor.Green,      // bright green
                            [93] = ConsoleColor.Yellow,     // bright yellow
                            [94] = ConsoleColor.Blue,       // bright blue
                            [95] = ConsoleColor.Magenta,    // bright magenta
                            [96] = ConsoleColor.Cyan,       // bright cyan
                            [97] = ConsoleColor.White       // bright white
                        };

                        ConsoleColor currentColor = Console.ForegroundColor;

                        for (int i = 0; i < art.Length; i++)
                        {
                            if (art[i] == '\x1b' && i + 1 < art.Length && art[i + 1] == '[')
                            {
                                // Found escape sequence
                                int end = art.IndexOf('m', i);
                                if (end == -1) break; // malformed
                                string code = art.Substring(i + 2, end - (i + 2));
                                foreach (var part in code.Split(';'))
                                {
                                    if (int.TryParse(part, out int n))
                                    {
                                        if (n == 0) currentColor = Console.ForegroundColor; // reset
                                        else if (ansiToConsole.TryGetValue(n, out var c)) currentColor = c;
                                    }
                                }
                                i = end; // skip escape sequence
                            }
                            else
                            {
                                Console.ForegroundColor = currentColor;
                                Console.Write(art[i]);
                            }
                        }

                        Console.ResetColor();
                        Console.WriteLine("\n");
                    }
                }

                string? displayVer = null;
                string? edition = null;

                using (var key = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion"))
                {
                    displayVer = key?.GetValue("DisplayVersion") as string;
                    edition = key?.GetValue("EditionID") as string;
                }

                var isx64 = Environment.Is64BitOperatingSystem ? "x64" : "x86";

                Console.WriteLine($"{PascalToTitleCase(GetOS().ToString())} {edition} {displayVer} {isx64} (Windows NT {Environment.OSVersion.Version})");
                var installDate = GetCombinedInstallDateTime();
                if (installDate != null)
                {
                    Console.WriteLine($"Installed {installDate.Value.ToString(CultureInfo.CurrentCulture.DateTimeFormat.FullDateTimePattern)}");
                }

                Console.WriteLine("Computer name: " + Environment.MachineName);
                Console.WriteLine("Username: " + Environment.UserName);
                Console.WriteLine("Uptime: " + TimeSpan.FromMilliseconds(Environment.TickCount64).ToString());
                Console.WriteLine($"System culture: {CultureInfo.CurrentCulture.TextInfo.ToTitleCase(CultureInfo.CurrentUICulture.DisplayName)}" +
                    $" (installed: {CultureInfo.CurrentCulture.TextInfo.ToTitleCase(CultureInfo.InstalledUICulture.DisplayName)})");

                Console.WriteLine();
                Console.WriteLine("--- Hardware Info ---");
                Console.WriteLine();

                Console.WriteLine("Computer:");
                Console.WriteLine();

                using (var searcher = new ManagementObjectSearcher("SELECT Manufacturer, Model, TotalPhysicalMemory, NumberOfProcessors FROM Win32_ComputerSystem"))
                {
                    foreach (ManagementObject obj in searcher.Get().Cast<ManagementObject>())
                    {
                        Console.WriteLine($"Manufacturer: {obj["Manufacturer"]}");
                        Console.WriteLine($"Model: {obj["Model"]}");
                        Console.WriteLine($"Total RAM: {FormatBytes((ulong)obj["TotalPhysicalMemory"])}");
                        Console.WriteLine($"Processor count: {obj["NumberOfProcessors"]}");
                    }
                }

                Console.WriteLine();
                Console.WriteLine("CPUs:");
                Console.WriteLine();

                using (var searcher = new ManagementObjectSearcher("SELECT Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed, AddressWidth, " +
                    "Architecture, Availability, ConfigManagerErrorCode, CpuStatus FROM Win32_Processor"))
                {
                    int i = 0;
                    foreach (ManagementObject obj in searcher.Get().Cast<ManagementObject>())
                    {
                        i++;
                        var paddingString = new string(' ', i.ToString().Length);
                        Console.WriteLine($"{i}. {obj["Name"]}");
                        Console.WriteLine(paddingString + $"  Cores: {obj["NumberOfCores"]}");
                        Console.WriteLine(paddingString + $"  Logical Processors: {obj["NumberOfLogicalProcessors"]}");
                        Console.WriteLine(paddingString + $"  Max Clock Speed: {FormatFrequency(Convert.ToDouble(obj["MaxClockSpeed"]))}");
                        Console.WriteLine(paddingString + $"  Address Width: {obj["AddressWidth"]} b");
                        Console.WriteLine(paddingString + $"  Architecture: {(ushort)obj["Architecture"] switch
                        {
                            0 => "x86",
                            1 => "MIPS",
                            2 => "Alpha",
                            3 => "PowerPC",
                            5 => "ARM",
                            6 => "ia64 (Itanium)",
                            9 => "x64",
                            12 => "ARM64",
                            _ => "Unknown"
                        } }");
                        Console.WriteLine(paddingString + $"  Availability: {(ushort)obj["Availability"] switch
                        {
                            1 => "Other",
                            3 => "Running/Full Power",
                            4 => "Warning",
                            5 => "In Test",
                            6 => "Not Applicable",
                            7 => "Power Off",
                            8 => "Offline",
                            9 => "Off Duty",
                            10 => "Degraded",
                            11 => "Not Installed",
                            12 => "Install Error",
                            13 => "Power Save - Status: Unknown",
                            14 => "Power Save - Status: Low Power Mode",
                            15 => "Power Save - Status: Standby",
                            16 => "Power Cycle",
                            17 => "Power Save - Status: Warning",
                            18 => "Paused",
                            19 => "Not Ready",
                            20 => "Not Configured",
                            21 => "Quiet",
                            2 or _ => "Unknown"
                        }}");

                        
                        Console.WriteLine(paddingString + $"  Configuration manager status: {(uint)(obj["ConfigManagerErrorCode"] ?? 32u) switch
                        {
                            0 => "This device is working properly.",
                            1 => "This device is not configured correctly.",
                            2 => "Windows cannot load the driver for this device.",
                            3 => "The driver for this device might be corrupted, or your system may be running low on memory or other resources.",
                            4 => "This device is not working properly. One of its drivers or your registry might be corrupted.",
                            5 => "The driver for this device needs a resource that Windows cannot manage.",
                            6 => "The boot configuration for this device conflicts with other devices.",
                            7 => "Cannot filter.",
                            8 => "The driver loader for the device is missing.",
                            9 => "This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly.",
                            10 => "This device cannot start.",
                            11 => "This device failed.",
                            12 => "This device cannot find enough free resources that it can use.",
                            13 => "Windows cannot verify this device's resources.",
                            14 => "This device cannot work properly until you restart your computer.",
                            15 => "This device is not working properly because there is probably a re-enumeration problem.",
                            16 => "Windows cannot identify all the resources this device uses.",
                            17 => "This device is asking for an unknown resource type.",
                            18 => "Reinstall the drivers for this device.",
                            19 => "Failure using the VxD loader.",
                            20 => "Your registry might be corrupted.",
                            21 => "System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device.",
                            22 => "This device is disabled.",
                            23 => "System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation.",
                            24 => "This device is not present, is not working properly, or does not have all its drivers installed.",
                            25 => "Windows is still setting up this device.",
                            26 => "Windows is still setting up this device.",
                            27 => "This device does not have valid log configuration.",
                            28 => "The drivers for this device are not installed.",
                            29 => "This device is disabled because the firmware of the device did not give it the required resources.",
                            30 => "This device is using an Interrupt Request (IRQ) resource that another device is using.",
                            31 => "This device is not working properly because Windows cannot load the drivers required for this device.",
                            32 => "[Unknown]",
                            _ => $"Code {obj["ConfigManagerErrorCode"]} unknown"
                        }}");

                        Console.WriteLine(paddingString + $"  Status: {(ushort)obj["CpuStatus"] switch
                        {
                            1 => "Enabled",
                            2 => "Disabled via BIOS",
                            3 => "Disabled from POST error",
                            4 => "Idle",
                            5 or 6 => "[Reserved Value]",
                            7 => "Other",
                            0 or _ => $"Unknown ({obj["CpuStatus"]})"
                        } }");

                        Console.WriteLine();
                    }
                }

                Console.WriteLine();
                Console.WriteLine("GPUs:");
                Console.WriteLine();

                using (var searcher = new ManagementObjectSearcher("SELECT Name, DeviceID, PNPDeviceID, AdapterRAM, Description, VideoProcessor, " +
                    "VideoArchitecture, VideoMemoryType, CurrentBitsPerPixel, CurrentHorizontalResolution, CurrentVerticalResolution, " +
                    "CurrentRefreshRate, MaxRefreshRate, MinRefreshRate, ConfigManagerErrorCode, Availability, VideoModeDescription, " +
                    "InstalledDisplayDrivers, DriverVersion, DriverDate, InfFilename, InfSection, Monochrome, AcceleratorCapabilities, " +
                    "AdapterCompatibility, CapabilityDescriptions, CurrentScanMode, DitherType FROM Win32_VideoController"))
                {
                    int i = 0;
                    foreach (ManagementObject obj in searcher.Get().Cast<ManagementObject>())
                    {
                        i++;
                        var paddingString = new string(' ', i.ToString().Length);
                        Console.WriteLine($"{i}. {obj["Name"]}");
                        Console.WriteLine(paddingString + $"  Description: {obj["Description"]}");
                        Console.WriteLine(paddingString + $"  Device ID: {obj["DeviceID"]}");
                        Console.WriteLine(paddingString + $"  Plug-and-Play (PNP) Device ID: {obj["PNPDeviceID"]}");
                        Console.WriteLine(paddingString + $"  Adapter RAM: {FormatBytes(Convert.ToUInt64(obj["AdapterRAM"]))}");
                        Console.WriteLine(paddingString + $"  Video processor: {obj["VideoProcessor"]}");
                        Console.WriteLine(paddingString + $"  Video architecture: {(VideoArchitecture)obj["VideoArchitecture"] switch
                        {
                            VideoArchitecture.Eight514A => "8514/A",
                            VideoArchitecture.PC98 => "PC-98",
                            _ => PascalToTitleCase(((VideoArchitecture)obj["VideoArchitecture"]).ToString())
                        } }");
                        Console.WriteLine(paddingString + $"  Video memory type: {(VideoMemoryType)obj["VideoMemoryType"] switch
                        {
                            VideoMemoryType.VRAM => "Virtual Memory (VRAM)",
                            VideoMemoryType.ThreeDRAM => "3DRAM",
                            _ => PascalToTitleCase(((VideoMemoryType)obj["VideoMemoryType"]).ToString() ?? string.Empty)
                        } }");
                        Console.WriteLine(paddingString + $"  Current BPP (Bits per Pixel): {obj["CurrentBitsPerPixel"]} bpp");

                        var stdres = MapStandardResolutions(Convert.ToInt32(obj["CurrentHorizontalResolution"]), Convert.ToInt32(obj["CurrentVerticalResolution"]));

                        Console.WriteLine(paddingString + $"  Current resolution: {obj["CurrentHorizontalResolution"]} x {obj["CurrentVerticalResolution"]} " +
                            (stdres != null ? $"({stdres}) " : string.Empty) +
                            $"({(uint)obj["CurrentHorizontalResolution"] * (uint)obj["CurrentVerticalResolution"]} px)");
                        Console.WriteLine(paddingString + $"  Current refresh rate: {obj["CurrentRefreshRate"]} Hz");
                        Console.WriteLine(paddingString + $"  Maximum refresh rate: {obj["MaxRefreshRate"]} Hz");
                        Console.WriteLine(paddingString + $"  Minimum refresh rate: {obj["MinRefreshRate"]} Hz");

                        // Most strings come from MSDN; see https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-videocontroller

                        Console.WriteLine(paddingString + $"  Configuration manager status: {(uint)obj["ConfigManagerErrorCode"] switch
                        {
                            0 => "This device is working properly.",
                            1 => "This device is not configured correctly.",
                            2 => "Windows cannot load the driver for this device.",
                            3 => "The driver for this device might be corrupted, or your system may be running low on memory or other resources.",
                            4 => "This device is not working properly. One of its drivers or your registry might be corrupted.",
                            5 => "The driver for this device needs a resource that Windows cannot manage.",
                            6 => "The boot configuration for this device conflicts with other devices.",
                            7 => "Cannot filter.",
                            8 => "The driver loader for the device is missing.",
                            9 => "This device is not working properly because the controlling firmware is reporting the resources for the device incorrectly.",
                            10 => "This device cannot start.",
                            11 => "This device failed.",
                            12 => "This device cannot find enough free resources that it can use.",
                            13 => "Windows cannot verify this device's resources.",
                            14 => "This device cannot work properly until you restart your computer.",
                            15 => "This device is not working properly because there is probably a re-enumeration problem.",
                            16 => "Windows cannot identify all the resources this device uses.",
                            17 => "This device is asking for an unknown resource type.",
                            18 => "Reinstall the drivers for this device.",
                            19 => "Failure using the VxD loader.",
                            20 => "Your registry might be corrupted.",
                            21 => "System failure: Try changing the driver for this device. If that does not work, see your hardware documentation. Windows is removing this device.",
                            22 => "This device is disabled.",
                            23 => "System failure: Try changing the driver for this device. If that doesn't work, see your hardware documentation.",
                            24 => "This device is not present, is not working properly, or does not have all its drivers installed.",
                            25 => "Windows is still setting up this device.",
                            26 => "Windows is still setting up this device.",
                            27 => "This device does not have valid log configuration.",
                            28 => "The drivers for this device are not installed.",
                            29 => "This device is disabled because the firmware of the device did not give it the required resources.",
                            30 => "This device is using an Interrupt Request (IRQ) resource that another device is using.",
                            31 => "This device is not working properly because Windows cannot load the drivers required for this device.",
                            _ => $"Code {obj["ConfigManagerErrorCode"]} unknown"
                        } }");
                        Console.WriteLine(paddingString + $"  Availability: {(ushort)obj["Availability"] switch
                        {
                            1 => "Other",
                            3 => "Running/Full Power",
                            4 => "Warning",
                            5 => "In Test",
                            6 => "Not Applicable",
                            7 => "Power Off",
                            8 => "Offline",
                            9 => "Off Duty",
                            10 => "Degraded",
                            11 => "Not Installed",
                            12 => "Install Error",
                            13 => "Power Save - Status: Unknown",
                            14 => "Power Save - Status: Low Power Mode",
                            15 => "Power Save - Status: Standby",
                            16 => "Power Cycle",
                            17 => "Power Save - Status: Warning",
                            18 => "Paused",
                            19 => "Not Ready",
                            20 => "Not Configured",
                            21 => "Quiet",
                            2 or _ => "Unknown"
                        } }");
                        Console.WriteLine(paddingString + $"  Video mode: {obj["VideoModeDescription"]}");
                        var dispDrivers = ((string)obj["InstalledDisplayDrivers"]).Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                        Console.WriteLine(paddingString + $"  Installed display drivers:");
                        foreach (string drvPath in dispDrivers)
                        {
                            Console.WriteLine(paddingString + $"    - {drvPath}");
                        }
                        Console.WriteLine();
                        
                        Console.WriteLine(paddingString + $"  Driver version: {obj["DriverVersion"]}");
                        Console.WriteLine(paddingString + $"  Driver last modified: {ManagementDateTimeConverter.ToDateTime((string)obj["DriverDate"])}");
                        Console.WriteLine(paddingString + $"  INF file name: {obj["InfFilename"]}");
                        Console.WriteLine(paddingString + $"  INF Windows video information section: {obj["InfSection"]}");
                        var mc = ((bool)obj["Monochrome"]) ? "Yes" : "No";
                        Console.WriteLine(paddingString + $"  Monochrome: {mc}");
                        Console.WriteLine(paddingString + $"  Accelerator Capabilities:");

                        var capabilities = obj["AcceleratorCapabilities"] as ushort[];
                        var cbdescs = obj["CapabilityDescriptions"] as string[];
                        if (capabilities != null && cbdescs != null)
                        {
                            int ii = 0;
                            foreach (ushort capability in capabilities)
                            {
                                Console.WriteLine(paddingString + $"    - {capability switch
                                {
                                    1 => "Other",
                                    2 => "Graphics Accelerator",
                                    3 => "3D Accelerator",
                                    0 or _ => "Unknown"
                                }}");
                                Console.WriteLine(paddingString + $"      {cbdescs.ElementAt(ii)}");
                                ii++;
                            }
                        }
                        else
                        {
                            Console.WriteLine(paddingString + "    [Capabilities not found]");
                        }

                        Console.WriteLine();
                        Console.WriteLine(paddingString + $"  Adapter compatibility: {obj["AdapterCompatibility"]}");
                        Console.WriteLine(paddingString + $"  Current scan mode: {(ushort)obj["CurrentScanMode"] switch
                        {
                            1 => "Other",
                            3 => "Interlaced",
                            4 => "Non-interlaced",
                            2 or _ => "Unknown"
                        } }");

                        Console.WriteLine(paddingString + $"  Dithering type: {(uint)obj["DitherType"] switch
                        {
                            0 => "Other",
                            1 => "None",
                            2 => "Coarse brush dithering",
                            3 => "Fine brush dithering",
                            4 => "Line art dithering",
                            5 => "Gray scaling",
                            _ => $"Custom ({obj["DitherType"]})"
                        }}");

                        Console.WriteLine();
                    }
                }
            });

            var result = rootCmd.Parse(args);
            result.Invoke();
        }
    }

}